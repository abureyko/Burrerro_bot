import asyncio
import logging
import aiohttp
from aiogram import Router, F
from aiogram.filters import Command

import database
import keyboards
from config import bot

logger = logging.getLogger(__name__)

commands_router = Router()

API_URL = 'https://cataas.com/cat?json=true'
db = database.CatDataBase()


# -------------------------------------------------------------------------------------------------------
async def get_random_cat_url():
    timeout = aiohttp.ClientTimeout(
        total=10,  # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
        connect=3,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        sock_read=5  # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
    )

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['url']
                return
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logging.error(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")
        return None


async def send_cat(chat_id: int, reply_msg_func, reply_photo_func):
    await bot.send_chat_action(chat_id, 'upload_photo')
    img = await get_random_cat_url()
    if img:
        await reply_photo_func(photo=img,
            caption="–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞?",
            reply_markup=keyboards.rate_cat_kb
        )
    else:
        await reply_msg_func('–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üò¢')
# -------------------------------------------------------------------------------------------------------
@commands_router.startup()
async def on_startup():
    await db.create_db()

@commands_router.message(Command('cat_pic'))
async def cat_pic_handler(message):
    try:
        await send_cat(message.chat.id, message.answer, message.answer_photo)
    except Exception as e:
        logging.error("Error in cat_pic_handler: {e}")
        await message.answer('–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ç–∏–∫–∞ üò¢')


@commands_router.callback_query((F.data == 'load') | (F.data == 'no_load'))
async def load_cat_callback(callback):
    try:
        await callback.answer()
        if callback.data == 'load':
            await bot.send_chat_action(callback.message.chat.id, 'typing')
            user_id = callback.from_user.id
            file_id = callback.message.photo[-1].file_id
            success = await db.add_favourites(user_id, file_id)
            if success:
                await callback.message.answer("–æ—Ç–ª–∏—á–Ω–æ! —è –∑–∞–≥—Ä—É–∑–∏–ª –≤–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ‚úÖ")
            else:
                await callback.message.answer("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚ùå")

            TIME_TO_DELAY = 1
            await asyncio.sleep(TIME_TO_DELAY)
            await callback.message.answer('—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ç–∏–∫–æ–≤? üòΩ', reply_markup=keyboards.next_cat_kb)
        else:
            await send_cat(callback.message.chat.id, callback.message.answer, callback.message.answer_photo)
    except Exception as e:
        logging.error(f"Error in load_cat_callback: {e}")


@commands_router.callback_query((F.data == 'send') | (F.data == 'no_send'))
async def next_cat_callback(callback):
    await callback.answer()
    if callback.data == 'send':
        await send_cat(callback.message.chat.id, callback.message.answer, callback.message.answer_photo)
    else:
        await callback.message.answer('–≤–∞—Å –ø–æ–Ω—è–ª')
